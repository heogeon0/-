class Node {
  constructor(idx, prev, next) {
    this.prev = prev;
    this.idx = idx;
    this.next = next;
  }
}

function solution(n, k, cmds) {
  let prevNode = new Node(0);
  let selected;

  for (let i = 1; i < n; i++) {
    const curNode = new Node(i, prevNode);
    prevNode.next = curNode;
    prevNode = curNode;

    if (i === k) {
      selected = curNode;
    }
  }

  let deleted = [];

  cmds.forEach((cmd) => {
    let [key, num] = cmd.split(" ");
    let cnt = 0;
    switch (key) {
      case "U":
        while (cnt < num && selected.prev) {
          selected = selected.prev;
          cnt++;
        }
        break;

      case "D":
        while (cnt < num && selected.next) {
          selected = selected.next;
          cnt++;
        }
        break;

      case "C":
        deleted.push(selected);
        const prev = selected.prev;
        const next = selected.next;

        if (prev && next) {
          prev.next = next;
          next.prev = prev;
          selected = next;
        } else if (prev) {
          prev.next = null;
          selected = prev;
        } else if (next) {
          next.prev = null;
          selected = next;
        }
        break;
      case "Z":
        const node = deleted.pop();
        const prevNode = node.prev;
        const nextNode = node.next;

        if (prevNode) {
          prevNode.next = node;
        }
        if (nextNode) {
          nextNode.prev = node;
        }
    }
  });

  var answer = new Array(n).fill("O");

  deleted.forEach((node) => {
    answer[node.idx] = "X";
  });
  return answer.join("");
}
